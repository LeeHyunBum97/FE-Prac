비트 연산자
1. & : AND 2개 값이 모두 1일 때만 1을 반환하고 그외에는 0을 반환
2. | : OR 둘 중 하나의 값이 1이면 1을 반환하고 모두 0일 때만 0반환
3. ^ : XOR 2개 값이 같은 경우 0, 다른 경우 1 반환
4. >> : 이진수를 오른쪽으로 이동시키는 연산자, 첫번째 비트는 이동 대상이 아니다
5. >>> : 이진수를 오른쪽으로 이동시키는 연산자, 첫번째 비트도 이동 대상이어서 양수의 경우 >>와 동일하나 음수의 경우 >>와 다르게 동작
6. <<, <<<

논리 연산자
1. && : AND 두값이 모두 참인 경우에만 True반환 아닌 경우 false반환
2. || : OR 두 값중 하나만 true여도 ture를 반환하고 두 값모두 false일 경우 false반환
3. ! : NOT 반대 값 반환

연산과정중에 &&인 경우 앞의 데잍터가 false이면 뒤의 내용은 확인하지 않고 ||의 경우도 앞의 데이터가 True이면 뒤의 내용을 확인하지 않는다.
실제로 컴퓨터 연산에서도 그렇게 작용하기 때문에 &&, ||을 사용하는 경우 뒤의 조건식을 연산하지 않기 위해 첫번째 조건 값이 무엇이 나오는지
먼저 확인해서 연산과정을 효율적으로 만들 필요가 있다.

Boolean이외의 데이터를 가지고 &&, ||연산이 가능하나 이 경우 겨로가가 Boolean이 아닐 수 있다.
0, null, NAN(not a number), undefined,"" -> false로 간주되는 것 Falsy
이 외 Falsy가 아닌 값들은 Truthy라 하며 모두 True로 간주되어진다.

복합 할당 연산자 : 연산과 할당을 동시에 수행하는 것, [연산자 = ]
                  왼쪽이 참조하는 데이터와 오른쪽 데이터를 연산자를 이용해 연산을 수행하고 왼쪽의 변수에 참조를 대입한다.
                  ex> var x =10 에서 x+=1, x-=1, x*=1, x/=1, x%=1.... x가 참조하는 10 + 1을하고 그 결과를 x가 참조하는 것

문자열 연산자
1. + : 다른 데이터를 문자열로 변환해서 연결 시켜주는 연산
2. * : 숫자로 변환이 가능한 문자열이라면 곱하기를 해서 숫자를 결과로 반환

삼항 연산자 : [A ? x : y]에서 A의 값이 T이면 x, F이면 y

쉼표(,) 연산자 : 연속해서 적용하기 위해, 두 피연산자를 모두 평가한 후 오른쪽 피연산자의 값을 반환한다.
                
?? : Nullish Operator라 하며 왼쪽의 데이터가 null 혹은 undefined일 때 오른쪽 데이터를 반환하고 그렇지 않으면 외쪽의 데이터를 반환하는 연산자
    ||연산자를 이용하는 것과 유사할 수 있지만, 조금 상이하다.

new : 생성자를 호출해서 인스턴스를 생성하고 인스턴스의 참조를 리턴하는 연산자

this : 생성자나 객체 내부의 함수에 객체 자신을 가리키는 연산자

typeof : 데이터의 자료형을 문자열로 반환해주는 연산자

delete : 객체의 속성이나 배열의 요소를 삭제하는 연산자로 기존 데이터는 undefined의 값을 가지게 된다.

instance of : 객체가 특정 클래스로부터 만들어 졌는지 확인하기 위한 연산자.

in : 데이터가 객체나 배열의 요소인지 확인하는 연산자.

void : 함수를 만들 때 값을 반환하지 않도록 지정하기 위해 사용하는 연산자.

연산자의 우선순위
1. 요소 접근 연산자 : .[index], [index]
2. (), new 연산자
3. 단항연산자 : !, ++, --, typeof, void, delete, 부호(양수/음수)
4. 산술연산자(1) : %, *, /
5. 산술연산자(2) : +, -
6. 시프트연산자 : >>, >>>, <<
7. 관계연산자 : >, < >=, <=
8. 비교연산자 : ==, ===, !=, !===
9. 비트연산자 : &, ^, | (순서대로 우선순위가 높음)
10. 논리연산자 : &&, ||
11. 삼항연산자 : A ? x : y
12. 복합할당 연산자 : +=, -=, *=, /=, %=, =
13. 쉼표연산자 : ,



