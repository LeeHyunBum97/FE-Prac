제어문 : 기본적인 명령의 흐름은 왼쪽에서 오른쪽으로, 위에서 아래로 흐른다.
         이런 명령의 흐름을 변경하는 명령어가 제어문에 해당된다.

1. 분기문 : 조건이나 값에 따라 다른 문장을 수행하는 것과

 - if문
   if(표현식){
        표현식이 Truthy일 때 수행할 내용
   } else if {
        앞의 표현식이 Fasly이고 현재 표현식이 Truthy일 때 수행할 내용
   } else {
        앞의 모든 식이 Falsy일 때 수행할 내용
   }
-> else if 는 0개 이상 여러번 작성가능하고 else는 생략하거나 1번만 작성해야 한다.
   if와 else if, else는 별도의 블록으로 처리되어야 하고 가장 위의 표현식이 T라면 아래 표현식은 확인하지 않는다.
   그러므로 항상 분기문 사용시 가장 T가 많은 경우를 가장 윗줄의 표현식(조건문)을 삽입해 효율을 올리고 늘 주석으로 이를 알린다
   feat(코딩테스트)_전체를 못해도 중간까지 하는게 이득


 - switch문 : 값에 의한 분기
   switch(표현식){
        case x : 
            표현식이 x인 경우에 수행할 내용
            break;
        
        case y : 
            표현식이 y인 경우에 수행할 내용
            break;
        ....
        default :
            표현식이 x, y, .... 앞의 어디에도 해당되지 않을 경우 수행할 내용
            break;
   }
   -> 각 case당 break;없을 시 break를 만날 때까지 모든 case에 대한 수행을 하게된다, default 키워드 문 자체와 그 안의 break는 생략가능
      값에 자리에는 반드시 값이 아닌 또 다른 표현식이 와도 상관없다.
      case문은 여러개가 올 수 있지만, 생략불가
      switch(true){}로 작성하고 내부 case문에 Boolean표현식을 작성해 사용하는 경우도 있음


2. 반복문(Loop) : for가 while의 작업을 모두 대체 가능하나 실제 알고리즘에서는 while을 더 많이 사용한다.
                  중복된 코드가 여러개 분산되어 있는 경우를 스파게티 코드라고 하고 중복된 사항을 변경할 때 이러한 모든 코드를 찾아가는
                  것은 비효율적이기 때문에 반복문을 사용한다.
                  이때 for문은 특정 동작을 수행하기 때문에 보다 더 시간은 오래 걸릴 수 있으나 가독성과 유지보수 측면에서 사용한다.
                  경우에 따라 무조건 좋은 것은 아님
                  P.S. 대부분의 언어는 0부터 인덱스가 시작되나 R이나 Visual Basic은 1부터 인덱스가 시작된다.

 - for : loop보다는 iterator에 더 가까우나 while의 모든 기능을 대신 할 수 있어서 loop적인 요소로 사용된다.
    for(처음 한 번 수행하는 식; 판별식; 두번째 수행되는 식){
        반복할 내용;
    }
    처음 한 번 수행되는 식을 수행하고 판별식을 확인해서 falsy가 아니면 반복할 내용을 수행하고 이후 부터는 두번째 수행되는 식을 
    수행하고 판별식을 확인해서 falsy가 아니면이면 반복할 내용을 반복한다
    판별식이 Falsy가 되면 반복할 내용을 중지한다.
    ex> for( ; ; ){}


 - while : 표현식이 truthy라면 {}내용을 수행하고 다시 표현식으로 돌아와 표현식을 확인하고 Falsy가 될 때까지 {}을 수행한다.
    while(표현식){
        수행할 내용;
    }


 - do{}while : 표현식이 뒤에 있어서 {}의 내용을 어떤 상황속에도 1번은 수행된다, 기능적으로는 while과 동일하나 반드시 한번은
               수행되어야 한다는 의미전달을 위해 사용된다 -> sementic한 요소
    do{
        수행할 내용
    }while(표현식);

- for ~ in : 객체의 경우 속성 이름을 임시 변수에 순서대로 대임, 배열의 경우는 각 요소의 인덱스를 임시 변수에 대입 _ loop보다는 iterator요소

    for(임시변수 in 객체나 배열){
        수행할 내용
    }
    P.S iterator, loop 차이를 for ~ in으로 접근하는 것과 [index]로 접근하는 것의 차이로 확인할 수 있음
    