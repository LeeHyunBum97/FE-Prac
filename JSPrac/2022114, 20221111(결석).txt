

JS에서

1.비동기 처리

    1) 동기와 비동기
    
    <동기>
    순차적으로 하나씩처리, 하나의 작업이 완료되어야만 다음작업을 수행한다.

    <비동기>
    작업을 수행하다가 쉬는 시간이 생기거나 일정한 시간 이상 작업을 하거나 프로세서를 사용하지 않는 작업(입출력작업-디스크나 네트워크에서 데이터를
    받아오거나 전송하는 작업)을 수행하는 경우 다른 작업을 수행할 수 있도록 하는 방식
    오랜 시간이 걸리는 작업은 비동기로 처리하는 것이 일반적이다.

    2) 비동기 작업이 완료되었거나 중간에 에러가 발생한 경우 처리

    => 콜백 - 연속된 경우 콜백안에 콜백을 계속 삽입하는 구조

    => Promise : 연속된 콜백을 사용하는 경우 가독성 문제와 콜백 메서드 안에서의 예외처리 부분을 해결하기 위해등장 then, catch를 연속해서 작성하는 
                구조
                .then()
                .then()
                .then()
                .then()
                .catch()

    => async/await : Promise를 조금 더 간결하게 작성하기 위해서 등장
                    async 함수 {
                        변수 = await(비동기 처리)
                    }

2. JS에서 Communication(통신)
=> SOP(Simple origin Policy)와 CORS
   SOP(동일 출처 정책) : 동일한 도메인(등록된 도메인이 같아야하는데 포트번호까지 확인한다)의 데이터만 가져와서 사용할 수 있도록 한
   브라우저의 보안 정책

   브라우저에서 다른 도메인의 데이터를 사용하고자 하는 경우에는 서버에서 CORS설정(보토어 헤더로)을 해주거나 클라이언트에서 Proxy를 이용해서
   데이터를 가져오도록 작성

   CORS(Cross Origin Resource Sharing)은 교차 출처 자원 공유로 다른 도메인에서 지원을 사용할 수 있도록 해주는 것

   Proxy는 내부에 데이터를 요청하는 형태로 작성을 하지만 Application Server에서 외부로 나가서 데이터를 가져와서 전단해주는 방식

   ==> SOP를 지키지 않으면 보통 CORS예외가 발생한다, 이 Server단에서 CORS설정을 하거나 Client에서 Proxy설정을 해서 해결할 수 있다.
       그렇다면 언제 무엇을 사용해야 하나? -> Server의 개발자라면 CORS를 설정할 수 있으므로 수정이 가능하고 Client를 개발하고 다른 
       Server(Ex> 기상청 실시간 데이터 접근)의 데이터를 접근할 때는 Proxy를 사용한다.

   1) Ajax : 비동기적으로 서버의 데이터를 받아오는 JS의 기술
   2) Fetch API : Ajax의 단점을 보완하기 위해 등장한 비동기 JS 기술
      => Promise나 async/await를 적용해 Fetch API를 사용하기 쉽도록 해주는 JS 라이브러리 중에 axios가 있는데 이 라이브러리를 사용하기도 한다.

   3) Web Push : 클라이언트의 요청이 없어도 서버에서 클라이언트로 데이터를 전송하는 기술

   4) Web Socket : 연결형 서비스(웹 소켓은 ajax/fetch api/web push와 달리 요청-응답후 통신이 끊기는 것이 아니라 실제로
                   계속 연결 되어 있는것. - HTML5부터 등장)

3. 데이터 표현 방법 
   => 서로 다른 방식의 컴퓨터에서 데이터를 주고 받을려면 표준적인 포맷이 있어야 한다.
   => Parsing : 가져온 데이터를 해석하는 과정
   => Server 입자에서는 이 데이터 표현방식을 데이터를 만들어서 제공하는 것이 중요하고 client입장에서 이 데이터를 파싱해서 출력하는 것이 중요
   => DTD : HTML이나 XML은 브라우저가 해석하기도 하고 설정에 이용하는 경우에는 설정을 만든 곳에서 해석을 해야 하는데 이 해석하는 위치를
            DTD라고 한다.
            HTML이나 XML이 있을 때, 설정이라면 반드시 DTD를 확인한다.(팀 내에서 개발한 설정이나 데이터는 상관 없음.)
            <!DOCTYPE html>은 HTML5의 표준 DTD.


    1) 텍스트
       일반 문자열 => 구분 기호를 가지고 구분할 수 있도록 만든 포맷을 csv라고 합니다.
       변하지 않는 데이터를 제공하고자 할 때 주로 이용
       용량이 작기 때문이다.

    2) XML
       태그 형식으로 데이터르르 표현
       해석을 개발자가 한다는 것이 HTML과 다른 점이다.
       설정이나 데이터 전송에 이용을 하고 있다.
       최근에는 사용빈도가 낮아지고 있는 추세이다. -> 다른 방식보다 용량이 큰 편

    3) JSON
       JS의 데이터 표현법을 이용하는 방식으로 용량이 XML보다 작기 때문에 데이터 전송에 많이 사용한다.

    4) YML(Yaml-야믈)
       이메일 데이터 표현 방식으로 가독성이 높고 용량이 작기 때문에 최근 설정에 많이 이용된다.
       구글에서 만든 제품이나 Spring에서는 YML을 설정에 이용하고 있다, 아직 데이터 전송에는 사용 빈도수가 낮다.

    5) HTML은 데이터를 표현하는 것이 아니고 화면을 만드는 것으로 화면에 보이기는 한 Open API를 제공하지 않는 경우에 
       HTML을 가져와(Scraping) 임의로 해석해서 데이터 처럼 사용하는 경우가 있다(Ex> 웹 크롤링).
       HTML로 제공하는 경우는 Open API로 제공하는 것이 아니므로 반드시 저작권을 확인하고 사용해야 한다.

4. 프로젝트에서 모듈화

    1) src : 컴파일 되어야하는 소스 파일
    2) resource : 컴파일 할 필요가 없는 파일

5. ajax 실습

    1) json 파싱
       resource 디렉토리에 데이터로 사용할 json파일을 생성
        {
            "count": 2,
            "document": [
                {
                    "name": "park",
                    "age": "23",
                    "birthday": "09-13"
                }, {
                    "name": "kim",
                    "age": "26",
                    "birthday": "10-04"
                }

            ]
        }
        => 해당 데이터를 읽어올 html파일 생성