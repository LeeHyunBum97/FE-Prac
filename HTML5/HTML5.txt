1. HTML5
   => XHTML4에서 진화한 마크업 언어
   => 디자인과 내용의 분리 -> 특별한 경우가 아니면 디자인은 CSS를 이용
   => JAVA Applet, Active X, 플래시 와 같은 외부 플러그인을 최소화 - 자바의 플렉스나 .Net의 실버라이트 배제 (Ex> 게임 할 때 보안키)
   => 문서 구조의 의미나 문서 안에 삽입된 데이터의 의미 등을 명확하기 위한 사양이 추가 - Sementic적인 요소
   => 마크업 언어에 웹 애플리케이션을 만들 수 있는 API(JS를 이용해 제작)를 포함

2. 태그의 변화
   
   [추가된 태그]
   1) section, article, aside, header, hgroup, footer, nav => 문서 구조를 Sementic하게 하기 위해 추가된 태그
   2) figure, audio, video, canvas, source => 외부 컨텐츠 사용(멀티미디어)
   3) keygen, output, progress, meter => 폼 관련 태그
   4) mark, ruby, time, command, details, datalist => 텍스트 관련 태그

   [의미가 변경된 태그]
   1) hr, menum small, strong

   [태그에 추가된 속성]
   1) input -> 모바일을 위한 속성, 유효성 검사 관련 속성이 추가됨. 

   [없어진 요소] _ 표준에서는 없어졌다고 하나 기존의 사용하고 있는 곳들 때문에 브라우저 자체에서 삭제된 것은 아니다. - 의미의 변화도 마찬가지
   1) bgsound -> 싸이월드 배경음악 같은 요소 설정 audio가 대체
   2) applet 

   [**API의 변화**]
   1) 로컬 저장소 -> 이전에는 cookie만 사용
      => ** web Storage **
      => web SQL
      => Indexed DB

   2) Drag And Drop API

   3) GeoLocation : 위치 정보

   3) Canvas : 그리기 API _ 그래프나 이미지 출력을 외부라이브러리 없이 구현할 수 있게 되었음

   5) Web Worker :Thread 사용 가능.

   6) Math ML : 수식을 표현할 수 있지만, FireFox에서만 사용가능

   7) Communication API 
      => ajax Lv2로 변화(현재까지 사용한 것.)
      => Server Sent Events(Web Push)
      => ** Web Socket API **

4. 권장사항
   => Cookie보다는 LocalStaorage를 이용하는 것을 권장한다.
      쿠키는 서버에 요청할 때 마다 전송되고 문자열만 저장 가능
      LocalStorage는 JS객체를 저장할 수 있고 필요할 때 마다 서버에게 전송가능.
      [Server 입장에서는 Cookie(무조건적으로 서버로 보낸다.)를 수집하는 것이 유리하다.]

   => Cache보다는 Local DB를 사용하는 것을 권장.

   => JS 애니메이션 대신 CSS의 전환 효과를 이용하라.

   => 부담을 많이 주는 작업은 웹 워커 사용을 권장. - JS를 이용해서 플러그인 이나 PC에서 직접 동작하는 애플리케이션을 개발하는 경우.

5. 기본적인 문서구조 

1) DOCTYPE - DTD : <!DOCTYPE html>

2) 인코딩 설정 : <meta charset = "인코딩 방식">

3) 문서 검증 : HTML5 규격에 맞는지 검증한다, http://html5.validator.nu -> 물론 대형 사이트들도 모두 지키지는 못한다.

6. HTML5를 지원하지 않는 브라우저를 위한 코딩_지금은 거의 없음
   => 적용범위 확인 : https://caniuse.com/#Indexed

7. Mark up

   1) 추가된 섹션 요소 : header, section, article, aside, navm footer
                        => 실제로는 div와 같은 역할을 하지만 Sementic한 요소를 강화하기 위해서 사용한다.

   2) figure, figcaption
      => 이미지나 그래프 또는 예제 코드등을 작성할 때, 문서안에 삽입해 의미를 전할하기 위함,.
      <figure>
         <image src = "이미지 파일경로/>
         <figcaption> 그림에 대한 설명</figcaption>
      </figure>
      => 이미지 아래 그림에 대한 설명이 추가된다.
      => 음성지원 브라우저에서는 그림에 대한 정보를 읽어준다.(Sementic)

   3) ruby
      => 글자 위에 조그마한 글자를 표시하는 기능
         한자를 사용할 때 위의 독음을 표시하는 용도가 많아서 사용.

8. 멀티미디어 
   1) video 
      => 비디오 재생을 위한 태그
      => JS 객체로 추가됨
      <video id="video"></video>

      document.getElementById("video") ->  외부 플러그인 없이 DOM에 접근해 동영상을 제어할 수 있음
                                           브라우저 별로 코덱이 다르기 때문에 모든 영상을 전부 재생되는 것은 아니다.
                                           동일한 동영상을 여러 포맷으로 만들어 제공하는 것이 좋다.

      <video src = "동영상 경로"></video>

      <video>
         <source src="동영상 경로"/>
         <source src="동영상 경로"/>
         <source src="동영상 경로"/>
         ....                          => 브라우저에 따라 지원되지 않는 동영사 확장자가 있을 수 있으므로 같은 동영상의 여러 확장자를
                                          두면 알아서 브라우저에서 사용가능한 동영상을 재생하게 된다.
      </video>

   2) audio : video 태그와 사용법이 동일

   3) canvas 
      => 그래픽을 자유롭게 출력할 수 있는 html5에서 추가된 API
      => 2D 그래픽을 지원
      => 3D 그래픽은 Web GL을 이용해서 구현 (API : https://www.khronos.org/webgl/ | Sample : https://webglsamples.org)
   
   - 그래픽 가속 기술 : Open GL(Windows는 Direct X)
      Open GL이 어려워서 이를 쉽게 사용할 수 있도록 만든 그래픽 엔진 : Unity 3D, Unreal
      => 스마트 폰은 Open GL ES 인데, 애플에서는 자체 API를 제공한다.
      => 웹 그래픽 가속은 Web GL | 오디오 가속은 Open AL 
      => 그래픽 편집 : Open CV 
     
      => 태그만으로는 아무일도 하지 못하고 모든 작업은 JS를 이용해서 수행한다.
         [사용법]
         <canvas id="id" width="넓이" height="높이"></canvas>
         let 캔버스 변수 = document.getElementById("id")
         let context변수 = 캔버스변수.getContext("2d")
         
         context 변수를 이용해 그리기 작업
         context변수.save() : 컨텍스트 정보 저장
         context변수.restore() : 컨텍스트 정보 복원
         
         => Context : 어떤 작업을 하기 위해 필요한 부가 정보
                      canvas에서는 그림을 그리기 위해 선 색상, 면 색상, 선 두께 등의 정보가 필요한데 이 정보를 일일이 섲어하게 되면 그림을 하나
                      그리는데 많은 설정이 필요하다.
                      설정에 대한 부분을 Context에 저장해 두고 필요한 부분만 수정하면서 사용한다.
           
           Context Switching : 해당 개념에 넣어 보면 context에 미리 canvas의 설정을 넣어두고 그 다음에 다른 작업을 위해 전환하는 것

         => ImageSprite : 여러개의 이미지를 하나의 파일로 만들고 이미지를 적절한 크기로 잘라서 사용
                          컴퓨터에서 가장 많은 시간을 소모하는 작업 중 하나가 보조 기억장치에 있는 파일을 읽어오는 부분이기 때문에 이미지를
                          각각의 파일로 저장해서 읽어오는 것 보다는 여러개의 이미지를 하나의 파일로 만든 후 이를 불러들인 후에 
                          나눠서 출력하는 것이 효율적인 경우가 많다.

         => 각 픽셀의 값을 제어하는 것이 가능하다
            원형 UI 클릭을 만들고자 하는 경우 배경이 투명인 상태로 원을 그리고 마우스로 클리했을 때 그 영역의 색상 값을 추출해서 알파값이 0이면
            동작하지 않고 알파값이 0이 아니면 동작하도록 만들면 원 UI를 만들 수 있다.

      4) SVG(Scalable Vector Grapics)
         => XML을 이용해서 Vector 그래픽을 표시하느 API - 웹표준
         => Canvas는 Pixel 단위로 그림을 그리지만 SVG는 벡터 이미지
      
      5) Canvas와 SVG의 비교

         Canvas [이미지 처리 방식 : Bitmap(Pixel단위) | DOM이존재(JS로 제어가능) | 높은 해상도 이미지 사용시 성능 저하 | 애니메이션 지원X 
                | 외부 이미지로 저장 가능 | 게임에 적합]
         
         SVG [이미지 처리 방식 : 벡터 그래픽(선이나 도형 단위) | DOM이 존재하지 않음 | 이미지가 복잡해지면 Mark Up이 복잡해진다. | 애니메이션 가능 
             | 외부로 저장 불가 | 세밀한 해상도를 지원하는 UI에 적합(Graph)]

         => 실제 그래프에 사용하는 경우는 직접 작성하는 것도 가능하지만 d3js나 jqplot 같은 JS라이브러리를 사용하는 경우가 많다.
            jqplot이나 d3js 로 접속해서 예제를 가져올 수 있다.

9. FORM

   1) 기능변화
      => 여러가지 타입이 추가
      => 유효성 검사 기능이 추가
      => 진행 상황을 표시해주는 progress와 meter가 추가 되었음

   2) input의 type 추가 -> 대부분 모바일 위한 속성
      => 기존 input type : text, password, checkout, radio, file, button, image, submit, reset, hidden
      => 추가된 input type : search, tel, url, email, number, range, color, data, month, week, time, datetime-local
      
      => 네트워크 맞추었을 때 스마트 폰에서 접속하는 방법 
         (Live Server에 띄우는 것과 html 파일을 더블클릭하는 것의 차이는 전자는 실제로 내부 디렉토리의 파일과 가지고 있는 자원을 
          실제 서버에 올리지만 후자는 단순히 파일의 내용을 출력하는 것으로 후자는 와이파이를 맞춰도 접속불가 BUT 전자는 와이파이만
          맞추면 접속해서 TEST가능. -> input옵션중 모바일을 위한 속성값을 확인해 볼 수 있다.)

      다른 PC에서 접속하는 것을 허용하려면 방화벽을 해제해야 한다.
      
       P.S. Port Forwarding -> iptime 포트 포워딩 -> 사설 ip를 공용 ip로 만들어서 외부에서 PC에 서버처럼 접속 시키게 할 수 있다.

      => jquery를 사용했는지 <JQuery 홈페이지에서 옵션 확인가능>
         HTML5는 브라우저 별로 지원 범위가 달랐기에 추가된 기능을 사용하게 되면 브라우저 별로 설정을 다르게 해야 동일한 컨텐츠를 사용할 
         수 있다. --> jquery가 해당 부분(cross browsing)을 쉽게 해주는 JS라이브러리다.
         즉 , JQuery를 사용하면 브라우저에 구애받지 않고 손 쉬운 UI구성이 가능하다.
         그러나 국내에서는 IE의 비중이 많이 낮아지고 IE대신 나온 Edge는 html5를 지원하기 대문에 guswosms jQuery사용을 잘 하지 않는 추세,
         jQuery의 단점중 하나가 렌더링 속도가느림

   3) progress와 meter
      => 진행률을 보여주고자 할 때 사용하는 요소
      => JS를 이용해서 제어 
      => 기본적으로 max value는 100으로 설정되어 있고 value 속성을 이용해서 진행률을 표시한다.
      => 최대값이나 최소값을 변경하고자 하는 경우 min과 max 속성의 값을 변경하면 된다.

!! Memory Leak : 용도가 끝났는데도 작업을 계속 수행하고 있어서 메모리 낭비가 발생하는 것, 입출력 작업을 수행하거나 타이머 같은 자원을 사용할 
                 때 주로 발생, 타이버는 사용이 끝나면 해제 되어야 하고 입출력 작업은 입출력 스트림을 닫아야 한다.

   4) 추가된 속성
      => file : multiple 속성이 추가되서 속성을 설정하면 한번에 여러개 파일을 선택할 수 있음
      => ** autocomplete 속성 : 자동완성 기능 사용여부로 on과 off로 설정 -> 모바일에서 고려
      => list 속성과 datalist 속성을 이용하면 입력 값을 선택할 수 있도록 설정할 수 있다
         <input type="tel" list="telephonelist"/>
         ...
         <datalist id = "telephonelist"/>     
            <option value = "010-1234-5678"/>
            <option value = "010-3232-4564"/>
         </datalist>                                     ==> 와 같이 자동완성의 보기를 강제로 설정할 수도 있음

      => placeholder 속성을 이용해서 입력할 때 설명을 위한 텍스트 설정
      => autofocus 속성을 이용해서 첫번째 포커스 설정 -> 설정하지 않으면 사용자가 직접 클릭해서 선택하게 된다.

   5) *** 유효성 검사(Validation Check) ***
      => requierd : 필수로 입력해야 하는 input란인지 판별
      => maxlength : 최대 글자 수
      => min, max : 최소/최대 값 -> 숫자나 날짜에 사용
      => pattern : 정규식을 이용할 수 있으며 주로 input란의 알맞은 형식을 입력했는지 검사할 때 사용한다.

WebClient(브라우저 혹은 애플리케이션) <--> Web Server <--> Applicaition Server(Controll | Service | Repository) <--> Data Server(DB Server, File Server)

=> 웹서버 부터 데이터 서버 까지는 애플리케이션과 다른 곳에 위차함
   웹 클라이언트와 서버간에 통신을 하게 되면 트래픽이 발생 비용이 발생한다.

   웹 클라이언트에서 웹 서버로 전송하기 전에 유효성 검사를 해야 하고 Application Server가 Web Client로 부터 data를 전송 받으면 유효성 검사를
   해야한다.
   
   웹 클라이언트에서 유효성 검사를 수행해 조건에 맞지 않는 경우 전송하지 않으면 트래픽을 아낄 수 있기 때문에 수행해야 하고 Applicaition Server
   에서 다시 하는 이유는 데이터 전송 중에 변형이 있었을 지 모르기 때문에다.

*** 아래의 API 부터는 JS를 이용해서 제어해야한다.

10. Geo Location 

   1) 개요
      => 디바이스의 물리적 위치 정보를 파악하기 위한 JS API
      => 위치 정보 가져오기
         GPS와 같은 위성정보를 이용해서 가져오는 방법
         가까운 라우터의 위치를 가지고 오는 방법
         기지국의 위치를 가지고 오는 방법
         ---> 특별히 설정하지 않으면 위에서 부터 차례대로 적용된다. 오차범위 또한 같다.
      
      => 위치정보 사용을 허용해야 사용 가능하다, 현재 위치를 사용하는 것은 동의만 얻으면 가능하지만 수집은 허가증 필요.
   
   2) 위치 정보 사용가능 여부 확인
      => navigator.geolocation의 값을 확인

   3) 위치 정보를 가져와서 한 번만 사용하기
      => navigator.goelocation.getCurrentPosition(위치정보 가져오기를 성공했을 때 호출될 함수, 위치정보를 가져오는데 실패했을 호출되는 함수, 옵션)

         ---> 위치 정보를 가져오는데 성공했을 때 호출되는 함수에는 매개변수로 위치 정보와 관련된 객체가 전달된다 이 객체가 저장하고 있는 정보는
              JS 뿐만 아니라 모바일 API에서도 동일
              => coords -> latitude(위도), logitude(경도), altitude(고도 only GPS), accuracy(정확도), altitudeAccuracy(고도의 정확도), 
                 heading(방향), speed(속도)
                 timestamp : 위치 정보를 가져온 시간 --> 가져온 시간과 순서가 일치하지 않을 수 있음

         ---> 위치 정보를 가져오는데 실패했을 때 호출되는 함수에도 매개변수가 넘어가는데 이 경우에는 에러 객체가 전달되고 code 속성을 확인하면
              실패한 이유를 알 수 있음.

   4) 위치 정보를 계속 가져와서 사용하기
      => let 변수  = navigator.goelocation.watchPosition(위치정보 가져오기를 성공했을 때 호출될 함수, 
                                                              위치정보를 가져오는데 실패했을 호출되는 함수, 옵션)
         를 사용하면 계속해서 위치 정보를 파악할 수 있다, 하지만 굳이 변수에 선언해서 사용하길 권장하는 이유는  clearWatch(변수)를 호출해
         더 이상 위치 정보를 가져오지 않게 한다. -> Memory Leak;

   5) 옵션
      => 객체 형태로 대입
         {
            enableHighAccuracy : 정확도가 높은 위치 정보를 사용하도록 하는 옵션으로 기본값은 false
            timeout : 일정 시간이 지난 데이터는 폐기하는 옵션으로 밀리초 단위로 설정한다.
            maximumAge : 0을 설정하면 항상 최신의 데이터를 가져온다. -> 위치정보를 가지고올 주기를 설정하는 것
         }
      => 스마트 폰을 이용하는 경우는 옵션 설정이 중요
         스마트 폰에서 배터리를 가장 많이 소비하는 2가지가 블루투스를 사용하는 것과 gps를 이용하는 경우이다.(동영상 제외 센서가 아님)

   6) 웹 화면에 카카오 맵 띄우기
      => kakao open API : https://www.developers.kakao.com
      => key발급
      애플리케이션을 생성하고 JS 키 복사
      바로사용은 불가능하고 플랫폼을 등록해야함
      네이티브 앱은 앱의 패키지 이름을 등록해야하고 웹의 경우는 도메인을 등록해야 한다.
      연습할 때는 웹의 경우는 http://locahost:포트번호 형태로 등록하고 실제 서비스에 사용할 때는 localhost 대신에 등록한 도메인이나

      401 Error의 경우 앱키 혹은 도메인을 확인할 것.

   7) File API
      => 파일을 읽고 쓰기 위한 API
      => input 타입의 file에 multiple 속성이 추가되어서 이 속성의 값을 설정하면 여러개 파일을 선택하는 것이 가능하다.
      => 텍스트 파일을 읽을 때는 인코딩 설정에 주의해야 한다.
      => 일반 파일을 읽을 때는 FileReader 객체를 생선한 후 reader.readAsDataURL(파일객체)를 호출하고 load 이벤트와 error이벤트를 처리한다.
         load는 전부 읽었을 때 FileReader 객체의 result에 읽은 내용을 저장하고 error 이벤트는 읽기에 실패했을 때 실패한 이유를 저장하고 있는
         객체의 를 넘겨준다.

      => 이미지 미리보기

11. Drag And Drop API
   => 브라우저 내에서 사용할 수 도 있고 외부 프로그램과 브라우저 사이에도 사용할 수 있음
      외부 프로그램과 사용할 때는 외부 프로그램에서 드래그를 하고 브라우저에 드랍을 해야한다.
      파일을 첨부할 때 많이 사용된다.

12. 브라우저에 데이터 저장 ---- 브라우저/0개발자 도구/응용프로그램 에서 확인 가능

   1) 브라우저에 데이터를 저장하는 이유
      => 불필요한 트래픽을 줄이기 위해서
         메일 앱의 경우 매번 서버에 접속해서 서버의 데이터를 받아오는 것은 자원의 낭비가 될 수 있다.
         제일 처음 접속할 때는 데이터를 다운로드 받고(파일의 존재여부 확인을 통해서_Ex> 게임을 받으면 설치화면에서 다시 필요한 파일을 받음)
         다음부터는 마지막 업데이트 된 시간을 비교해서 시간이 다르면 데이터가 수정된 것이므로 다운로드 받고 양쪽의 시간이 같다면 업데이트 된
         내용이 없으므로 다운로드 받지 않도록 구현해야한다.
         --> 그래서 항상 업데이트가 필요한 프로젝트에서는 Client에서는 데이터의 마지막 다운로드 시간을 Server에서는 마지막 업데이트 시간을 
             기록해 두어야 한다. 메일도 이러한 원리로 두 시간을 비교해서 기존에 브라우저에 있던 정보를 보여주고 다르다면 새로운 데이터를 가져온다.
         
      => 오프라인 상태에서도 데이터를 사용할 수 있도록 하기 위해서
         인터넷이 끊겼을 때, 아무것도 보여주지 않는 것 보다 과거의 데이터를 보여주는 것이 바람직함.

   2) 브라우저에 데이터를 저장하는 방법 <일단 Web Storage만 사용 --- Session, Token >
      
      => Web Storage : Map의 형태로 데이터를 저장

      => Web SQL : 관계형 데이터 베이스(SQLite3_외부에서 접속이 불가능한 저용량 DB, 사용방법은 MySQL 과 유사함) 사용.

      => Indexed DB : JS객체 형태로 저장 -> NoSQL과 유사함.
                     <현재 가장 많이 사용하는 DB는 RDBMS와 NoSQL DB를 많이 사용한다.> ---- 거의 비정형 데이터를 저장하는 용도로만 사용한다.
                     브라우저에서는 Web SQL보다 NoSQL을 권장하고 있다, 하지만 BE개발자는 Web SQL을 선호함. (아직 RDBMS가 많다.)

   3) Web Storage
      => 기존에는 Cookie를 사용했는데 Cookie를 사용하게 되면 문자열만 저장할 수 있고 서버에게 매 번 전송하게 된다.
         전송여부를 클라이언트가 결정할 수 없다.
         아이디 자동 저장같은 경우에는 서버에 계속 확인할 필요없이 브라우저에서 확인할 수 있으므로 서버에 매번 전송하게 되는 것은 비효율적임.

      => 종류가 두가지
         => LocalStorage : 브라우저에 저장해서 지우지 않는 한 절대 삭제가 되지않는 저장소
                           <로그인 시 장바구니에 남아있는것, 아이디 자동저장 등의 기능.>

         => SessionStorage : 현재 접속중인 브라우저에 해당하는 저장소, 다른 브라우저 혹은 다른 탭에서 같은 페이지에 접속하면 전혀 상관없는
                             새로운 Session이 생기는 것이고 페이지 내부에서 다른 링크 혹은 새탭으로 링크열기로 다른 페이지에 접속하게 되면 
                             이전 Session을 복제해서 가져온다. 
                             Session은 하나의 탭 혹은 브라우저가 종료될 때 해당 탭/브라우저의 Session이 소멸된다.
      
      => 데이터 저장과 가져오기 그리고 삭제
         저장하는 방법
         Local|Sesseion Storage.키이름 = 데이터
         Local|Sesseion Storage.["키이름"] = 데이터
         Local|Sesseion Storage.setItem("키이름", 데이터)

         가져오는 방법
         Local|Sesseion Storage.키이름 
         Local|Sesseion Storage.["키이름"]
         Local|Sesseion Storage.setItem("키이름")

         삭제하는 방법
         delete Local|Sesseion Storage.키이름
         delete Local|Sesseion Storage.["키이름"]
         Local|Sesseion Storage.removeItem("키이름")

      => 저장소에 데이터가 변경되면 window 객체에 storage 이벤트가 발생하고 이벤트 객체에는 key, oldValue, newValue, url, storageArea
         같은 속성이 만들어진다.
      
      => Local Storage는 전역 변수 localStorage로 사용할 수 있고 Session Storage는 sessionStorage로 사용할 수 있다.
      => 저장된 내용을 확인하는 방법은 브라우저 검사창에서 applicatioin을 확인하면 된다.

      => 세션 스토리지 - 브라우저를 종료했을 때 내용이 소멸되는지와 현재 창에서 새창을 출력했ㄷ을 때 내용이 복제가 되는지 확인
      => 로컬 스토리지 - id 저장을 구현하는데 브라우저가 종료하고 다시 연결했을 때 내용이 존재하는지 여부를 확인
      